
import { GoogleGenAI, Modality } from "@google/genai";
import type { UploadedFile } from '../types';

const MODEL_NAME = 'gemini-2.5-flash-image';

export const generateReunifyImage = async (
  childPhoto: UploadedFile,
  adultPhoto: UploadedFile,
  prompt: string
): Promise<string> => {
  if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable is not set.");
  }
  const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

  const childImagePart = {
    inlineData: {
      data: childPhoto.base64,
      mimeType: childPhoto.mimeType,
    },
  };

  const adultImagePart = {
    inlineData: {
      data: adultPhoto.base64,
      mimeType: adultPhoto.mimeType,
    },
  };

  const textPart = {
    text: prompt,
  };

  try {
    const response = await ai.models.generateContent({
      model: MODEL_NAME,
      contents: {
        parts: [childImagePart, adultImagePart, textPart],
      },
      config: {
        responseModalities: [Modality.IMAGE],
      },
    });

    for (const part of response.candidates?.[0]?.content?.parts || []) {
      if (part.inlineData) {
        const base64ImageBytes: string = part.inlineData.data;
        return `data:${part.inlineData.mimeType};base64,${base64ImageBytes}`;
      }
    }

    throw new Error("No image was generated by the API.");
  } catch (error) {
    console.error("Gemini API call failed:", error);
    throw new Error("Failed to generate image. Please check the console for more details.");
  }
};
